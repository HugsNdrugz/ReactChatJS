Below is the full command-line setup tailored for Replit, where both the Flask backend and React frontend will run seamlessly.


---

1. Create the Project Structure

# Create project directories
mkdir -p messenger-clone/backend messenger-clone/frontend

# Navigate to the project directory
cd messenger-clone


---

2. Backend Setup (Flask)

Step 1: Install Python Dependencies

Navigate to the backend directory:

cd backend

Create a replit.nix file to manage dependencies:

cat > replit.nix <<EOF
{ pkgs }:
pkgs.mkShell {
  buildInputs = [
    pkgs.python310
    pkgs.python310Packages.flask
    pkgs.python310Packages.flask_cors
    pkgs.python310Packages.psycopg2
    pkgs.python310Packages.python-dotenv
  ];
}
EOF

Create the .env file with PostgreSQL credentials and secrets:

cat > .env <<EOF
DATABASE_URL=postgresql://neondb_owner:4piPg2YGLuRy@ep-fragrant-scene-a507b740.us-east-2.aws.neon.tech/neondb?sslmode=require
FLASK_SECRET_KEY=d9555badcd09ae9bb0d4ecf0efbbc673
EOF

Create the app.py backend application:

cat > app.py <<EOF
from flask import Flask, jsonify, request
from flask_cors import CORS
import psycopg2
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

app = Flask(__name__)
CORS(app)
app.config['SECRET_KEY'] = os.getenv('FLASK_SECRET_KEY')
DATABASE_URL = os.getenv('DATABASE_URL')

def get_db_connection():
    return psycopg2.connect(DATABASE_URL)

def fetch_contacts():
    query = """
        SELECT sender, MAX(time) AS last_time, MAX(text) AS last_message
        FROM chats
        GROUP BY sender
        ORDER BY last_time DESC
    """
    conn = get_db_connection()
    with conn.cursor() as cur:
        cur.execute(query)
        contacts = cur.fetchall()
    conn.close()
    return [{'name': row[0], 'lastMessage': row[2], 'lastTime': row[1].isoformat()} for row in contacts]

def fetch_chat_history(contact):
    query = """
        SELECT time, sender, text FROM chats 
        WHERE sender = %s OR sender = 'You' 
        ORDER BY time ASC
    """
    conn = get_db_connection()
    with conn.cursor() as cur:
        cur.execute(query, (contact,))
        history = cur.fetchall()
    conn.close()
    return [{'time': row[0], 'sender': row[1], 'text': row[2]} for row in history]

@app.route('/contacts', methods=['GET'])
def get_contacts():
    return jsonify(fetch_contacts())

@app.route('/chat/<contact>', methods=['GET'])
def get_chat(contact):
    return jsonify(fetch_chat_history(contact))

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
EOF


---

3. Frontend Setup (React)

Step 1: Initialize React App

Navigate to the frontend directory:

cd ../frontend

Initialize a React app:

npx create-react-app .

Step 2: Install React Dependencies

npm install @mui/material @emotion/react @emotion/styled axios react-router-dom timeago.js

Step 3: Create React Components

Create the App.js file:

cat > src/App.js <<EOF
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import ContactList from './components/ContactList';
import ChatView from './components/ChatView';

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<ContactList />} />
        <Route path="/chat/:contact" element={<ChatView />} />
      </Routes>
    </Router>
  );
}

export default App;
EOF

Create the ContactList.js component:

mkdir -p src/components
cat > src/components/ContactList.js <<EOF
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { List, ListItem, ListItemAvatar, ListItemText, Avatar } from '@mui/material';
import { Link } from 'react-router-dom';

function ContactList() {
  const [contacts, setContacts] = useState([]);

  useEffect(() => {
    axios.get('http://localhost:5000/contacts').then((response) => {
      setContacts(response.data);
    });
  }, []);

  return (
    <List>
      {contacts.map((contact) => (
        <Link key={contact.name} to={`/chat/${contact.name}`} style={{ textDecoration: 'none' }}>
          <ListItem button>
            <ListItemAvatar>
              <Avatar src={`https://robohash.org/${contact.name}?set=set2`} />
            </ListItemAvatar>
            <ListItemText
              primary={contact.name}
              secondary={new Date(contact.lastTime).toLocaleString()}
            />
          </ListItem>
        </Link>
      ))}
    </List>
  );
}

export default ContactList;
EOF

Create the ChatView.js component:

cat > src/components/ChatView.js <<EOF
import React, { useEffect, useState } from 'react';
import { useParams, Link } from 'react-router-dom';
import axios from 'axios';
import { List, ListItem, Typography, Box, Button } from '@mui/material';
import TimeAgo from 'timeago.js';

function ChatView() {
  const { contact } = useParams();
  const [messages, setMessages] = useState([]);
  const timeago = new TimeAgo();

  useEffect(() => {
    axios.get(\`http://localhost:5000/chat/\${contact}\`).then((response) => {
      setMessages(response.data);
    });
  }, [contact]);

  return (
    <Box sx={{ width: '100%', maxWidth: 640, margin: 'auto', mt: 4, px: 2 }}>
      <Box display="flex" alignItems="center" mb={2}>
        <Link to="/" style={{ textDecoration: 'none' }}>
          <Button variant="contained" color="primary">Back</Button>
        </Link>
        <Typography variant="h6" sx={{ ml: 2 }}>{contact}</Typography>
      </Box>

      <List>
        {messages.map((msg, index) => (
          <ListItem
            key={index}
            sx={{
              display: 'flex',
              justifyContent: msg.sender === contact ? 'flex-start' : 'flex-end',
              mb: 1,
            }}
          >
            <Box
              sx={{
                bgcolor: msg.sender === contact ? 'grey.300' : 'primary.main',
                color: msg.sender === contact ? 'black' : 'white',
                p: 2,
                borderRadius: 2,
                maxWidth: '70%',
              }}
            >
              <Typography variant="body1">{msg.text}</Typography>
              <Typography variant="caption" sx={{ display: 'block', mt: 1 }}>
                {timeago.format(msg.time)}
              </Typography>
            </Box>
          </ListItem>
        ))}
      </List>
    </Box>
  );
}

export default ChatView;
EOF


---

4. Run the Application

Step 1: Start the Flask Backend

In one Replit shell tab, navigate to the backend and run:

cd backend
python app.py

Step 2: Start the React Frontend

In another Replit shell tab, navigate to the frontend and run:

cd frontend
npm start


---

5. Access the Application

Backend: http://localhost:5000

Frontend: http://localhost:3000



---

This completes the setup! Your Flask-React application is now running on Replit. Let me know if you encounter any issues!

