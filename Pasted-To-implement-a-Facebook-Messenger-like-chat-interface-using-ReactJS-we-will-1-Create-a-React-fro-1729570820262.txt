To implement a Facebook Messenger-like chat interface using ReactJS, we will:

1. Create a React front-end that displays contacts with previews of their latest messages.


2. When a contact is clicked, show the chat history for that contact.


3. Use Flask as the backend API to fetch data from PostgreSQL.




---

Overview of the Architecture

Frontend: ReactJS

Backend: Flask (providing API endpoints)

Database: PostgreSQL (storing contacts and messages)



---

Step 1: Backend (Flask) Setup

First, we need to expose the data through API endpoints that React can call.

Flask API (app.py)

from flask import Flask, jsonify, g
import pg8000

app = Flask(__name__)

def get_db():
    if 'db' not in g:
        g.db = pg8000.connect(
            database='neondb',
            user='neondb_owner',
            password='4piPg2YGLuRy',
            host='ep-fragrant-scene-a507b740.us-east-2.aws.neon.tech',
            port=5432
        )
    return g.db

@app.teardown_appcontext
def close_db(exception):
    db = g.pop('db', None)
    if db is not None:
        db.close()

def execute_query(query, params=None):
    db = get_db()
    try:
        with db.cursor() as cur:
            cur.execute(query, params or ())
            db.commit()
            return cur.fetchall()
    except Exception as e:
        db.rollback()
        print(f"SQL Error: {e}")
        return []

@app.route('/api/contacts')
def get_contacts():
    contacts = execute_query('''
        SELECT sender, MAX(time) AS last_message_time, text 
        FROM chats 
        GROUP BY sender 
        ORDER BY last_message_time DESC;
    ''')
    return jsonify(contacts)

@app.route('/api/chat/<contact>')
def get_chat(contact):
    messages = execute_query('''
        SELECT time, sender, text 
        FROM chats 
        WHERE sender = %s 
        ORDER BY time ASC;
    ''', (contact,))
    return jsonify(messages)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=True)


---

Step 2: React Frontend Setup

1. Create a React App:

npx create-react-app messenger-clone
cd messenger-clone


2. Install Axios for API calls:

npm install axios


3. Folder Structure:

/src
├── App.js
├── components/
│   ├── Contacts.js
│   └── Chat.js
└── index.css




---

Step 3: React Components

App.js

import React, { useState } from 'react';
import Contacts from './components/Contacts';
import Chat from './components/Chat';
import './index.css';

function App() {
    const [selectedContact, setSelectedContact] = useState(null);

    return (
        <div className="app">
            {!selectedContact ? (
                <Contacts onSelectContact={setSelectedContact} />
            ) : (
                <Chat contact={selectedContact} onBack={() => setSelectedContact(null)} />
            )}
        </div>
    );
}

export default App;


---

Contacts.js

import React, { useEffect, useState } from 'react';
import axios from 'axios';

function Contacts({ onSelectContact }) {
    const [contacts, setContacts] = useState([]);

    useEffect(() => {
        axios.get('/api/contacts')
            .then(response => setContacts(response.data))
            .catch(error => console.error('Error fetching contacts:', error));
    }, []);

    return (
        <div className="contacts">
            <h1>Contacts</h1>
            <ul>
                {contacts.map((contact, index) => (
                    <li key={index} onClick={() => onSelectContact(contact[0])}>
                        <div className="contact">
                            <strong>{contact[0]}</strong>
                            <p>{contact[2]}</p>
                            <small>{new Date(contact[1]).toLocaleString()}</small>
                        </div>
                    </li>
                ))}
            </ul>
        </div>
    );
}

export default Contacts;


---

Chat.js

import React, { useEffect, useState } from 'react';
import axios from 'axios';

function Chat({ contact, onBack }) {
    const [messages, setMessages] = useState([]);

    useEffect(() => {
        axios.get(`/api/chat/${contact}`)
            .then(response => setMessages(response.data))
            .catch(error => console.error('Error fetching chat:', error));
    }, [contact]);

    return (
        <div className="chat">
            <button onClick={onBack}>Back to Contacts</button>
            <h1>Chat with {contact}</h1>
            <div className="messages">
                {messages.map((msg, index) => (
                    <div key={index} className={`message ${msg[1] === contact ? 'received' : 'sent'}`}>
                        <p>{msg[2]}</p>
                        <small>{new Date(msg[0]).toLocaleString()}</small>
                    </div>
                ))}
            </div>
        </div>
    );
}

export default Chat;


---

Step 4: CSS Styling (index.css)

body {
    margin: 0;
    padding: 0;
    font-family: Arial, sans-serif;
    background-color: #f0f2f5;
}

.app {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

.contacts, .chat {
    width: 400px;
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.contact {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 0;
    border-bottom: 1px solid #ddd;
}

.message {
    margin: 10px 0;
    padding: 10px;
    border-radius: 10px;
    max-width: 70%;
}

.sent {
    background-color: #0084ff;
    color: white;
    align-self: flex-end;
}

.received {
    background-color: #e4e6eb;
    align-self: flex-start;
}


---

Step 5: Run the Flask API and React App

1. Run Flask Backend:

python app.py


2. Run React Frontend:

npm start


3. Open the React app at http://localhost:3000 and verify the contacts and chat pages.




---

Summary

This setup creates a ReactJS front-end that:

1. Lists contacts with their latest message.


2. Displays chat history when a contact is selected.


3. Uses Flask as the backend API to fetch data from PostgreSQL.



This structure provides a clean, scalable, and responsive Messenger-like interface. Let me know if you need further adjustments!

