To replicate a Facebook Messenger-like interface using your contacts and chat history, we need to:

1. Display contacts with a preview of their latest message.


2. When a contact is clicked, show the chat history.


3. Apply modern UI/UX design for a Messenger-like feel (using CSS + HTML).


4. Ensure smooth navigation between contacts and chat view.



Hereâ€™s a complete, step-by-step guide to achieve this in Flask.


---

Plan:

1. Home Page: List of contacts with a preview of their latest message.


2. Chat Page: Displays chat history with a contact, styled like a Messenger chat.


3. CSS Styling: Use TailwindCSS to replicate the Messenger look.


4. Database Queries: Fetch latest messages and chat history.




---

Step 1: Database Queries

Fetch Contacts with Latest Message

SELECT sender, MAX(time) AS last_message_time, text 
FROM chats 
GROUP BY sender 
ORDER BY last_message_time DESC;

Fetch Chat History for a Contact

SELECT time, sender, text 
FROM chats 
WHERE sender = %s 
ORDER BY time ASC;


---

Step 2: Flask App (app.py)

from flask import Flask, render_template, g
import pg8000

app = Flask(__name__)

def get_db():
    """Connect to the PostgreSQL database."""
    if 'db' not in g:
        g.db = pg8000.connect(
            database='neondb',
            user='neondb_owner',
            password='4piPg2YGLuRy',
            host='ep-fragrant-scene-a507b740.us-east-2.aws.neon.tech',
            port=5432
        )
    return g.db

@app.teardown_appcontext
def close_db(exception):
    """Close the database connection after each request."""
    db = g.pop('db', None)
    if db is not None:
        db.close()

def execute_query(query, params=None):
    """Helper function to execute queries safely."""
    db = get_db()
    try:
        with db.cursor() as cur:
            cur.execute(query, params or ())
            db.commit()
            return cur.fetchall()
    except Exception as e:
        db.rollback()
        print(f"SQL Error: {e}")
        return []

@app.route('/')
def home():
    """Home page showing contacts with their latest message."""
    contacts = execute_query('''
        SELECT sender, MAX(time) AS last_message_time, text 
        FROM chats 
        GROUP BY sender 
        ORDER BY last_message_time DESC;
    ''')
    return render_template('home.html', contacts=contacts)

@app.route('/chat/<contact>')
def chat(contact):
    """Chat page showing message history with a contact."""
    messages = execute_query('''
        SELECT time, sender, text 
        FROM chats 
        WHERE sender = %s 
        ORDER BY time ASC;
    ''', (contact,))
    return render_template('chat.html', contact=contact, messages=messages)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=True)


---

Step 3: HTML Templates

Home Page (templates/home.html)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contacts - Messenger Clone</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 min-h-screen p-6">
    <h1 class="text-4xl font-bold mb-6">Messenger Clone</h1>
    <ul class="space-y-4">
        {% for contact in contacts %}
        <li class="bg-white p-4 rounded-lg shadow hover:bg-gray-50">
            <a href="/chat/{{ contact[0] }}" class="flex items-center space-x-4">
                <div class="w-12 h-12 bg-blue-400 rounded-full"></div>
                <div class="flex-1">
                    <h2 class="text-xl font-semibold">{{ contact[0] }}</h2>
                    <p class="text-gray-500">{{ contact[2] }}</p>
                </div>
                <span class="text-sm text-gray-400">{{ contact[1].split(' ')[0] }}</span>
            </a>
        </li>
        {% endfor %}
    </ul>
</body>
</html>


---

Chat Page (templates/chat.html)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat with {{ contact }}</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 min-h-screen p-6">
    <h1 class="text-2xl font-semibold mb-4">Chat with {{ contact }}</h1>
    <div class="space-y-4">
        {% for msg in messages %}
        <div class="flex {% if msg[1] == contact %}justify-start{% else %}justify-end{% endif %}">
            <div class="max-w-xs p-3 rounded-lg shadow {% if msg[1] == contact %}bg-gray-200{% else %}bg-blue-500 text-white{% endif %}">
                <p class="text-sm">{{ msg[2] }}</p>
                <small class="block mt-1 text-xs text-gray-500">{{ msg[0] }}</small>
            </div>
        </div>
        {% endfor %}
    </div>
    <a href="/" class="block mt-6 text-blue-500">Back to Contacts</a>
</body>
</html>


---

Step 4: Styling with TailwindCSS

TailwindCSS provides a sleek and responsive UI with minimal effort.

The contact list and chat messages are styled to resemble Facebook Messenger.



---

How It Works

1. Home Page:

Lists all contacts with their latest message preview.

Clicking on a contact opens the chat page.



2. Chat Page:

Displays the full chat history with the selected contact.

Messages are aligned to the left or right depending on the sender.





---

Next Steps

1. Test the App:

Run the Flask app in Replit and check if contacts and chat views work as expected.



2. Fine-tuning:

Add avatars (using dynamic images or placeholders).

Improve transitions for a smoother UX.





---

This structure provides a clean, production-ready interface for your contacts and chat data, closely mirroring the Facebook Messenger experience.

